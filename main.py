import os
import json
import time
import logging
import threading
from datetime import datetime, timedelta
from flask import Flask, request
import pytz
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.events import EVENT_JOB_ERROR, EVENT_JOB_EXECUTED

# =================== –ù–ê–°–¢–†–û–ô–ö–ê ===================
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID", "-1003095096004"))
PUBLIC_URL = os.getenv("PUBLIC_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-app.onrender.com

if not TOKEN:
    raise SystemExit("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")

# Telegram bot
bot = telebot.TeleBot(TOKEN, threaded=True)
app = Flask(__name__)

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞
tz = pytz.timezone("Asia/Vladivostok")

# =================== –õ–û–ì–ò ===================
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot.log", encoding="utf-8")
    ]
)

# =================== –î–ê–ù–ù–´–ï ===================
last_pill_time = {}
last_pill_lock = threading.Lock()

reminders = [
    "–ñ–æ–ø–∞, –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É.",
    "–ñ–æ–ø–∞, –≤—Ä–µ–º—è —Ç–∞–±–ª–µ—Ç–æ–∫.",
    "–ù–∞–≥–ª–∞—è, –≤—ã–ø–µ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∞–±–ª–µ—Ç–æ—á–∫—É.",
    "–°–∫–∞–∑–æ—á–Ω–∏—Ü–∞, —Ç–∞–±–ª–µ—Ç–æ—á–∫–∞ –∑–æ–≤—ë—Ç!",
    "–ñ–æ–ø–∞, –Ω–µ –∑–∞–±—É–¥—å –≤—ã–ø–∏—Ç—å.",
    "–ù–∞–≥–ª–∞—è, —Ç–≤–æ—è —Ç–∞–±–ª–µ—Ç–æ—á–∫–∞ –∂–¥—ë—Ç.",
    "–°–æ—Ñ–∞, –≤—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–æ—á–∫—É."
]

# =================== –§–£–ù–ö–¶–ò–ò ===================
def save_last_pill_time():
    with last_pill_lock:
        try:
            data = {
                k: {
                    'sent_time': v['sent_time'].isoformat(),
                    'taken_time': v['taken_time'].isoformat() if v['taken_time'] else None
                } for k, v in last_pill_time.items()
            }
            with open('last_pill_time.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logging.debug("‚úÖ last_pill_time —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ last_pill_time: {e}")

def load_last_pill_time():
    global last_pill_time
    try:
        with open('last_pill_time.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            last_pill_time = {
                int(k): {
                    'sent_time': datetime.fromisoformat(v['sent_time']),
                    'taken_time': datetime.fromisoformat(v['taken_time']) if v['taken_time'] else None
                } for k, v in data.items()
            }
        logging.info("‚úÖ last_pill_time –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except FileNotFoundError:
        logging.info("–§–∞–π–ª last_pill_time.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
        last_pill_time = {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ last_pill_time: {e}")
        last_pill_time = {}

# =================== –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ===================
def send_reminder():
    current_time = datetime.now(tz)
    day_of_week = current_time.weekday()
    message_text = reminders[day_of_week]

    keyboard = telebot.types.InlineKeyboardMarkup()
    button = telebot.types.InlineKeyboardButton("‚úÖ –í—ã–ø–∏–ª–∞", callback_data="took_pill")
    keyboard.add(button)

    try:
        sent_message = bot.send_message(CHANNEL_ID, message_text, reply_markup=keyboard)
        with last_pill_lock:
            last_pill_time[sent_message.message_id] = {"sent_time": current_time, "taken_time": None}
        save_last_pill_time()
        logging.info(f"[{current_time}] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id={sent_message.message_id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def check_reminder():
    current_time = datetime.now(tz)
    logging.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    with last_pill_lock:
        for message_id, times in list(last_pill_time.items()):
            sent_time = times["sent_time"]
            taken_time = times["taken_time"]
            if taken_time is None and current_time - sent_time > timedelta(minutes=5):
                try:
                    bot.send_message(CHANNEL_ID, "–ù–∞–≥–ª–∞—è, —Ç—ã –Ω–µ –Ω–∞–∂–∞–ª–∞ –∫–Ω–æ–ø–∫—É! –í—ã–ø–µ–π —Ç–∞–±–ª–µ—Ç–∫—É üò†")
                    last_pill_time[message_id]["taken_time"] = current_time
                    save_last_pill_time()
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è message_id={message_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")

def log_bot_status():
    current_time = datetime.now(tz)
    logging.info(f"–°—Ç–∞—Ç—É—Å: {len(last_pill_time)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    with last_pill_lock:
        for message_id, times in last_pill_time.items():
            logging.info(f"‚Üí {message_id}: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {times['sent_time']}, –Ω–∞–∂–∞—Ç–∞: {bool(times['taken_time'])}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    current_time = datetime.now(tz)
    if call.data == "took_pill":
        try:
            bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ!")
            bot.send_message(CHANNEL_ID, "–ú–æ–ª–æ–¥–µ—Ü ‚ù§Ô∏è")
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            with last_pill_lock:
                if call.message.message_id in last_pill_time:
                    last_pill_time[call.message.message_id]["taken_time"] = current_time
                    save_last_pill_time()
            logging.info(f"[{current_time}] –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ (message_id={call.message.message_id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: {e}")

# =================== APSCHEDULER ===================
scheduler = BackgroundScheduler(timezone=tz)

def setup_scheduler():
    scheduler.remove_all_jobs()
    scheduler.add_job(send_reminder, 'cron', hour=15, minute=0, id='send_reminder')
    scheduler.add_job(check_reminder, 'interval', minutes=10, id='check_reminder')
    scheduler.add_job(log_bot_status, 'interval', minutes=2, id='log_status')
    logging.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")
    for job in scheduler.get_jobs():
        logging.info(f"‚Üí {job}")

def job_listener(event):
    if event.exception:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {event.job_id}: {event.exception}")
    else:
        logging.debug(f"–ó–∞–¥–∞—á–∞ {event.job_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

scheduler.add_listener(job_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)

# =================== FLASK ROUTES ===================
@app.route('/')
def home():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (Render Flask Webhook).", 200

@app.route(f"/webhook/{TOKEN}", methods=['POST'])
def webhook():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '', 200

def set_webhook():
    if not PUBLIC_URL:
        logging.error("‚ùå PUBLIC_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏! Webhook –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    webhook_url = f"{PUBLIC_URL}/webhook/{TOKEN}"
    bot.remove_webhook()
    success = bot.set_webhook(url=webhook_url)
    logging.info(f"üîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook: {webhook_url} ‚Äî {'—É—Å–ø–µ—à–Ω–æ' if success else '–æ—à–∏–±–∫–∞'}")

# =================== MAIN ===================
if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render...")
    load_last_pill_time()
    setup_scheduler()
    scheduler.start()
    set_webhook()
    try:
        bot.get_me()
        bot.send_message(CHANNEL_ID, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
        logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram API.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram API: {e}")
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
